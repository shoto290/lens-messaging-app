---
description:
globs:
alwaysApply: false
---
# API Integration

This project uses a structured approach to API integration:

## Service Layer

- [ApiService](mdc:src/services/api-service.ts): Core API client using Ky
- Domain-specific services:
  - [UserService](mdc:src/services/user-service.ts): User authentication and management
  - [RequestService](mdc:src/services/request-service.ts): Request operations
  - [PortfolioService](mdc:src/services/portfolio-service.ts): Portfolio operations

## Type Definitions

- [UserServiceTypes](mdc:src/services/user-service.types.ts): User-related types
- [RequestServiceTypes](mdc:src/services/request-service.types.ts): Request-related types
- [PortfolioServiceTypes](mdc:src/services/portfolio-service.types.ts): Portfolio-related types

## Data Fetching Pattern

1. Service layer defines API endpoints and methods
2. Custom hooks in [src/hooks](mdc:src/hooks) use React Query with services
3. Components consume hooks for data fetching and mutations
4. Global stores may be updated based on API responses

## Error Handling

- API errors are caught and formatted consistently
- Toast notifications via Sonner for user feedback
- Error states in UI components for graceful degradation
