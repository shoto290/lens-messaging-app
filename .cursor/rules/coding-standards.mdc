---
description:
globs:
alwaysApply: false
---
# Coding Standards

This project follows these coding standards:

## Clean Code Principles

- **Meaningful Names**: Variables and functions have descriptive names
- **Single Responsibility**: Functions and components do one thing well
- **DRY (Don't Repeat Yourself)**: Code is reused through proper abstraction
- **Constants Over Magic Numbers**: Named constants for important values

## TypeScript Best Practices

- Strong typing with TypeScript interfaces and types
- Zod schemas for runtime validation
- Explicit return types on functions
- Proper use of generics where applicable

## Component Structure

- Client components use "use client" directive
- Props use React.ComponentProps where appropriate
- Components follow composition pattern
- Form components use React Hook Form with Zod validation

## State Management

- Zustand stores follow a consistent pattern
- React Query for server state
- Local state with useState/useReducer
- Props for component configuration

## Styling Approach

- Tailwind CSS with utility classes
- class-variance-authority for component variants
- cn utility for conditional class merging
- Consistent spacing and layout patterns
